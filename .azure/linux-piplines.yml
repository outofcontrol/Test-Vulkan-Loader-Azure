trigger:
- main

jobs:
# - job: linux
#   strategy:
#     matrix:
#       gcc_debug_ubuntu2004:
#         compiler.cc: gcc
#         compiler.cxx: g++
#         config: Debug
#         osVmImage: ubuntu-20.04
#       gcc_release_ubuntu2004:
#         compiler.cc: gcc
#         compiler.cxx: g++
#         config: Release
#         osVmImage: ubuntu-20.04
#       gcc_debug_ubuntu2204:
#         compiler.cc: gcc
#         compiler.cxx: g++
#         config: Debug
#         osVmImage: ubuntu-22.04
#       gcc_release_ubuntu2204:
#         compiler.cc: gcc
#         compiler.cxx: g++
#         config: Release
#         osVmImage: ubuntu-22.04
#       clang_debug_ubuntu2004:
#         compiler.cc: clang
#         compiler.cxx: clang++
#         config: Debug
#         osVmImage: ubuntu-20.04
#       clang_release_ubuntu2004:
#         compiler.cc: clang
#         compiler.cxx: clang++
#         config: Release
#         osVmImage: ubuntu-20.04
#       clang_debug_ubuntu2204:
#         compiler.cc: clang
#         compiler.cxx: clang++
#         config: Debug
#         osVmImage: ubuntu-22.04
#       clang_release_ubuntu2204:
#         compiler.cc: clang
#         compiler.cxx: clang++
#         config: Release
#         osVmImage: ubuntu-22.04
#   pool:
#     vmImage: $(osVmImage)

#   steps:
#   - checkout: self
#   - script: sudo apt update && sudo apt install --yes --no-install-recommends libwayland-dev libxrandr-dev
#     displayName: 'Install Dependencies'
#   - script: |
#       if [ "$(osVmImage)" == "ubuntu-20.04" ]; then
#         wget https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.sh
#         sudo bash cmake-3.17.2-Linux-x86_64.sh --skip-license --prefix=/usr/local
#       fi
#     displayName: 'Install CMake for Ubuntu 20.04'
#   - script: |
#       cmake -S. -B build \
#       -D CMAKE_BUILD_TYPE=$(config) \
#       -D BUILD_TESTS=ON \
#       -D UPDATE_DEPS=ON \
#       -D LOADER_ENABLE_ADDRESS_SANITIZER=ON \
#       -D BUILD_WERROR=ON \
#       -D CMAKE_CXX_COMPILER=$(compiler.cxx) \
#       -D CMAKE_C_COMPILER=$(compiler.cc)
#     displayName: 'Configure CMake'
#   - script: cmake --build build
#     displayName: 'Build'
#   - script: ctest --output-on-failure --test-dir build/
#     displayName: 'Run Tests'
#   - script: cmake --install build --prefix /tmp
#     displayName: 'Install'

# - job: codegen

#   pool: 
#     vmImage: 'ubuntu-latest'

#   steps:
#   - checkout: self
#   - script: |
#       python scripts/update_deps.py --dir ext --no-build
#       python scripts/generate_source.py --verify ext/Vulkan-Headers/registry/
#     displayName: Run codegen

# - job: linux_no_asm
#   pool:
#     vmImage: 'ubuntu-22.04'

#   steps:
#   - checkout: self
#   - script: |
#       sudo apt update
#       sudo apt install --yes --no-install-recommends libwayland-dev libxrandr-dev
#     displayName: 'Install Dependencies'
#   - script: |
#       cmake -S. -B build \
#       -D CMAKE_BUILD_TYPE=Release \
#       -D BUILD_TESTS=ON \
#       -D UPDATE_DEPS=ON \
#       -D BUILD_WERROR=ON \
#       -D USE_GAS=OFF \
#       -D CMAKE_C_COMPILER=clang \
#       -D CMAKE_CXX_COMPILER=clang++
#     displayName: 'Pre-Build'
#   - script: cmake --build build
#     displayName: 'Build'
#   - script: cmake --install build --prefix /tmp
#     displayName: 'Install Build'
#   - script: ctest --output-on-failure -E UnknownFunction --test-dir build/
#     displayName: 'Run Tests'

- job: linux_32
  strategy:
    matrix:
      ubuntu-22-debug:
        config: Debug
        osVmImage: ubuntu-22.04
      # ubuntu-22-release:
      #   config: Release
      #   osVmImage: ubuntu-22.04

  pool:
    vmImage: $(osVmImage)

  steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
        addToPath: true
    - script: |
        mkdir ninja
        sudo wget -q https://github.com/ninja-build/ninja/releases/latest/download/ninja-linux.zip -O /usr/local/bin/ninja.gz
        gunzip /usr/local/bin/ninja.gz
        chmod a+x /usr/local/bin/ninja
        ninja --version
      displayName: 'Install Ninja'
    - script: |
        wget -q https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.tar.gz -O cmake.tar.gz
        mkdir cmake
        tar -xzf cmake.tar.gz -C cmake --strip-components 1
        export PATH=$(pwd)/cmake/bin:$PATH
      displayName: 'Install CMake 3.17.2'
    - script: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
      displayName: 'Enable 32 bit'
    - script: |
        sudo apt install --yes --no-install-recommends \
        gcc-multilib g++-multilib libc6:i386 libc6-dev-i386 libgcc-s1:i386 \
        libwayland-dev:i386 libxrandr-dev:i386 libxcb-res0:i386
      displayName: Install 32 bit gcc
    - script: |
        cmake -S. -B build \
        -D CMAKE_BUILD_TYPE=$(config) \
        -D BUILD_TESTS=ON \
        -D UPDATE_DEPS=ON \
        -D BUILD_WERROR=ON \
        -D SYSCONFDIR=/etc/not_vulkan \
        -G Ninja
      env:
        CFLAGS: -m32
        CXXFLAGS: -m32
        LDFLAGS: -m32
        ASFLAGS: --32
      displayName: 'Configure CMake'
    - script: cmake --build build
      displayName: CMake Build
    - script: cmake --install build --prefix /tmp
      displayName: CMake Install
    - script: ctest --output-on-failure
      workingDirectory: $(Build.SourcesDirectory)/build
      displayName: 'Run CTest' 

# - job: linux_32_no_asm

#   pool:
#     vmImage: ubuntu-22.04

#   steps:
#     - checkout: self
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '3.7'
#         addToPath: true
#     - script: |
#         installDir="/usr/local/bin"
#         curl -LO https://github.com/ninja-build/ninja/releases/download/v1.12.0/ninja-linux-aarch64.zip
#         unzip -q ninja-linux-aarch64.zip -d $installDir
#         displayName: 'Install Ninja'
#     - script: |
#         wget -q https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.tar.gz -O cmake.tar.gz
#         mkdir cmake
#         tar -xzf cmake.tar.gz -C cmake --strip-components 1
#         export PATH=$(pwd)/cmake/bin:$PATH
#       displayName: 'Install CMake 3.17.2'
#     - script: |
#         sudo dpkg --add-architecture i386
#         sudo apt-get update
#       displayName: 'Enable 32 bit'
#     - script: |
#         sudo apt install --yes --no-install-recommends \
#         gcc-multilib g++-multilib libc6:i386 libc6-dev-i386 libgcc-s1:i386 \
#         libwayland-dev:i386 libxrandr-dev:i386
#       displayName: 'Install libgcc'
#     - script: |
#         cmake -S. -B build \
#         -D CMAKE_BUILD_TYPE=Release \
#         -D BUILD_TESTS=ON \
#         -D UPDATE_DEPS=ON \
#         -D BUILD_WERROR=ON \
#         -D USE_GAS=OFF \
#         -G Ninja
#       displayName: 'Configure CMake'
#       env:
#         CFLAGS: -m32
#         CXXFLAGS: -m32
#         LDFLAGS: -m32
#         ASFLAGS: --32

#     - script: cmake --build build
#     - script: ctest --output-on-failure -E UnknownFunction
#       workingDirectory: $(Build.SourcesDirectory)/build
#       displayName: 'Run CTest' 

# - job: chromium

#   pool:
#     vmImage: 'ubuntu-latest'
    
#   steps:
#     - checkout: self
#     - script: scripts/gn/gn.py
