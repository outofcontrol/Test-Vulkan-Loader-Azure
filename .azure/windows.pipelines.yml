trigger:
- main

jobs:
- job: windows_vs
  strategy:
    matrix:
      win-win32-debug:
        arch: Win32
        config: Debug
        osVmImage: windows-latest
      win-win32-release:
        arch: Win32
        config: Release
        osVmImage: windows-latest
      win-x64-debug:
        arch: x64
        config: Debug
        osVmImage: windows-latest
      win-x64-release:
        arch: x64
        config: Release
        osVmImage: windows-latest
  pool:
    vmImage: $(osVmImage)

  steps:
  - checkout: self
  - script: |
      cmake -S. -B build `
      -D BUILD_TESTS=ON `
      -D UPDATE_DEPS=ON `
      -D CMAKE_BUILD_TYPE=$(config) `
      -A $(arch) `
      -D BUILD_WERROR=ON
  - script: cmake --build build/ --config $(config)
  - script: cmake --install build --prefix build/install --config $(config)
  - script: ctest --output-on-failure -C $(config) --test-dir build/

- job: windows_vs_no_asm
  strategy:
    matrix:
      win-win32:
        arch: Win32
      win-x64:
        arch: x64

  pool: 
    vmImage: 'windows-latest'

  steps:
  - checkout: self
  - script: |
      cmake -S. -B build `
      -D BUILD_TESTS=ON `
      -D UPDATE_DEPS=ON `
      -D USE_MASM=OFF `
      -D CMAKE_BUILD_TYPE=Release `
      -A $(arch) `
      -D BUILD_WERROR=ON
  - script: cmake --build build/ --config Release
  - script: ctest --output-on-failure -C Release -E UnknownFunction --test-dir build/

    # Test both clang and clang-cl (Chromium project uses clang-cl)
- job: windows_clang
  strategy:
    matrix:
      win-clang-debug:
        compiler: clang
        config: Debug
      win-clang-release:
        compiler: clang
        config: Release
      win-clangcl-debug:
        compiler: clang-cl
        config: Debug
      win-clangcl-release:
        compiler: clang-cl
        config: Release

  pool: 
    vmImage: 'windows-2022'

  steps:
  - checkout: self
  - script: |
      vswhere -latest -products '*' -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
      call "%vswhere_15%\..\..\VC\Auxiliary\Build\vcvars64.bat"
    displayName: 'Set up MSVC Development Environment'
  - script : |
      cmake -S. -B build `
      -D CMAKE_C_COMPILER=$(compiler) `
      -D CMAKE_CXX_COMPILER=$(compiler) `
      -D UPDATE_DEPS=ON `
      -D CMAKE_BUILD_TYPE=$(config) `
      -D BUILD_WERROR=ON `
      -D BUILD_TESTS=ON `
      -G Ninja
  - script: cmake --build build/
  - script: ctest --output-on-failure --test-dir build/
  - script: cmake --install build --prefix build/install

- job: mingw

  pool:
    vmImage: windows-2022

  # bash?
  steps:
  - checkout: self
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true
  - script: |
      $url = "https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-win64-x64.zip"
      $output = "cmake.zip"
      Invoke-WebRequest -Uri $url -OutFile $output
      Expand-Archive -Path $output -DestinationPath cmake
      $env:Path += ";$(Get-Location)\cmake\bin"
    displayName: 'Install CMake 3.17.2'
  - script: |
      C:/msys64/usr/bin/pacman -Sy --noconfirm --needed mingw-w64-x86_64-uasm
      echo 'C:/msys64/mingw64/bin' >> $env:Path
    displayName: 'Setup UASM'        
  - script: uasm -?
    displayName: 'UASM Check'
  - script: |
      cmake -S. -B build \
      -D UPDATE_DEPS=ON \
      -D CMAKE_BUILD_TYPE=Release \
      -D BUILD_WERROR=ON \
      -G Ninja
  - script: cmake --build build
  - script: cmake --install build --prefix /tmp

- job: mingw_no_asm
  pool:
    vmImage: windows-2022
  # bash?
  steps:
  - checkout: self
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      addToPath: true
  - script: |
      $url = "https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-win64-x64.zip"
      $output = "cmake.zip"
      Invoke-WebRequest -Uri $url -OutFile $output
      Expand-Archive -Path $output -DestinationPath cmake
      $env:Path += ";$(Get-Location)\cmake\bin"
    displayName: 'Install CMake 3.17.2'
  - script: |
      cmake -S. -B build \
      -D UPDATE_DEPS=ON \
      -D CMAKE_BUILD_TYPE=Release \
      -D BUILD_WERROR=ON \
      -G Ninja
  - script: cmake --build build
  - script: cmake --install build --prefix /tmp

- job: mingw_no_asm_explicit
  pool:
    vmImage: windows-2022
  # bash?
  steps:
  - checkout: self
  - script: |
      $url = "https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-win64-x64.zip"
      $output = "cmake.zip"
      Invoke-WebRequest -Uri $url -OutFile $output
      Expand-Archive -Path $output -DestinationPath cmake
      $env:Path += ";$(Get-Location)\cmake\bin"
    displayName: 'Install CMake 3.17.2'
  - script: |
      cmake -S. -B build \
      -D UPDATE_DEPS=ON \
      -D CMAKE_BUILD_TYPE=Release \
      -D BUILD_WERROR=ON \
      -D USE_MASM=OFF \
      -G Ninja
  - script: cmake --build build
  - script: cmake --install build --prefix /tmp