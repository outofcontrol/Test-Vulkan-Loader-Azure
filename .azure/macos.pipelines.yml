trigger:
- main

jobs:

- job: mac

  pool:
    vmImage: macOS-11

  strategy:
    matrix:
      mac-loader-on-debug:
        config: Debug
        static_build: APPLE_STATIC_LOADER=ON
      mac-loader-on-release:
        config: Release
        static_build: APPLE_STATIC_LOADER=ON
      mac-loader-off-debug:
        config: Debug
        static_build: APPLE_STATIC_LOADER=OFF
      mac-loader-off-release:
        config: Release
        static_build: APPLE_STATIC_LOADER=OFF

  steps:
  - checkout: self
  # - script: |
  #     /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  #   displayName: 'Install Homebrew'
  # - script: |
  #     brew install cmake ninja
  #   displayName: 'Install cmake and Ninja'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - script: |
      cmake -S. -B build \
      -D CMAKE_BUILD_TYPE=$(config) \
      -D $(static_build) \
      -D BUILD_TESTS=ON \
      -D UPDATE_DEPS=ON \
      -D BUILD_WERROR=ON \
      -D LOADER_ENABLE_ADDRESS_SANITIZER=ON \
      -G Ninja
    env:
      # Prevents regression of KhronosGroup/Vulkan-Loader/issues/1332
      LDFLAGS: -Wl,-fatal_warnings
  - script: cmake --build build
  - script: cmake --install build --prefix /tmp
  - script: ctest --output-on-failure --test-dir build/

# - job: apple_cross_compile

#   pool:
#     vmImage: macOS-12

#   strategy:
#     matrix:
#       cmake_name_ios:
#         CMAKE_SYSTEM_NAME: iOS
#       cmake_name_tvos:
#         CMAKE_SYSTEM_NAME: tvOS
#   steps:
#   - script: |
#       /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#     displayName: 'Install Homebrew'
#   - script: |
#       brew install cmake ninja
#     displayName: 'Install cmake and Ninja'
#   - checkout: self
#   - task: UsePythonVersion@0
#     inputs: 
#       versionSpec: 3.7
#       addToPath: true
#   - script: |
#       cmake -S . -B build \
#       -D CMAKE_SYSTEM_NAME=$(CMAKE_SYSTEM_NAME) \
#       "-D CMAKE_OSX_ARCHITECTURES=arm64;x86_64" \
#       -D CMAKE_BUILD_TYPE=Debug \
#       -D UPDATE_DEPS=ON \
#       -D BUILD_WERROR=ON \
#       -G Ninja
#     env:
#       LDFLAGS: -Wl,-fatal_warnings
#   - script: cmake --build build
#   - script: cmake --install build --prefix /tmp
#   - script: |
#       vtool -show-build /tmp/lib/libvulkan.dylib | grep 'architecture x86_64'
#       vtool -show-build /tmp/lib/libvulkan.dylib | grep 'architecture arm64'
#     displayName: Verify Universal Binary


#     # Building a universal binary disables assembly automatically
#     # Furthermore the Vulkan SDK ships universal binaries
# - job: mac_univeral
# #   displayName: "Universal Binary Testing (STATIC ${{ static }}) w/ ${{ generator }}"

#   pool: 
#     vmImage: macOS-latest

#   strategy:
#     matrix:
#       mac-on-ninja:
#         static: ON
#         generator: Ninja
#       mac-off-ninja:
#         static: OFF
#         generator: Ninja
#       mac-on-xcode:
#         static: ON
#         generator: Xcode
#       mac-off-xcode:
#         static: OFF
#         generator: Xcode

#   steps:
#   - checkout: self
#   - script: |
#       /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#     displayName: 'Install Homebrew'
#   - script: |
#       brew install cmake ninja
#     displayName: 'Install cmake and Ninja'
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: 3.7
#       addToPath: true
#   - script: |
#       cmake -S. -B build \
#       -D CMAKE_BUILD_TYPE=Release \
#       -D APPLE_STATIC_LOADER=$(static) \
#       "-D CMAKE_OSX_ARCHITECTURES=arm64;x86_64" \
#       -D BUILD_TESTS=ON \
#       -D UPDATE_DEPS=ON \
#       -D BUILD_WERROR=ON \
#       -G $(generator)
#     env:
#       LDFLAGS: -Wl,-fatal_warnings
#   - script: cmake --build build --config Release
#   - script: ctest --output-on-failure --build-config Release -E UnknownFunction --test-dir build/
#   - script: cmake --install build --config Release --prefix /tmp
#   - bash: |
#       if [ "$(static)" == "OFF" ]; then
#       run: |
#         vtool -show-build /tmp/lib/libvulkan.dylib | grep 'architecture x86_64'
#         vtool -show-build /tmp/lib/libvulkan.dylib | grep 'architecture arm64'
#     displayName: 'Verify Universal Binary'
